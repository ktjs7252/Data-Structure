** MAIN 코드

#include <stdio.h>
#include "ListBaseQueue.h"

int main(void)
{
   // Queue의 생성 및 초기화 ///////
   Queue q;
   QueueInit(&q);

   // 데이터 넣기 ///////
   Enqueue(&q, 1);  Enqueue(&q, 2);
   Enqueue(&q, 3);  Enqueue(&q, 4);
   Enqueue(&q, 5);

   // 데이터 꺼내기 ///////
   while(!QIsEmpty(&q))
      printf("%d ", Dequeue(&q)); 

   return 0;
}

** ListBaseQueue.h 헤더파일

#ifndef __LB_QUEUE_H__
#define __LB_QUEUE_H__

#define TRUE   1
#define FALSE   0

typedef int Data;

typedef struct _node
{
   Data data;
   struct _node * next;
} Node;

typedef struct _lQueue
{
   Node * front;
   Node * rear;
} LQueue;

typedef LQueue Queue;

void QueueInit(Queue * pq);
int QIsEmpty(Queue * pq);

void Enqueue(Queue * pq, Data data);
Data Dequeue(Queue * pq);
Data QPeek(Queue * pq);

#endif

** ListBaseQueue.c

#include <stdio.h>
#include <stdlib.h>
#include "ListBaseQueue.h"

void QueueInit(Queue * pq)
{
    pq->front = NULL;
    pq->rear = NULL;
}

int QIsEmpty(Queue * pq)
{
    if (pq->front == NULL)
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}

void Enqueue(Queue* pq, Data data)
{
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (pq->front == NULL)
    {
        pq->front = newNode;
        pq->rear = newNode;
    }
    else
    {
        pq->rear->next = newNode;
        pq->rear = newNode;
    }

}

Data Dequeue(Queue* pq)
{
    Node* rnode = pq->front;
    Data rdata = rnode->data;

    pq->front = pq->front->next;
    free(rnode);

    return rdata;
}
Data QPeek(Queue * pq)
{
    return pq->front->data;
}
