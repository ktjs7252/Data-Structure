** 한개의 소스코드로 표현한 연결리스트

/*

head -> [DUMMY, *] -> [2, *] -> [4, *] < -tail

*/

#include <stdio.h>
#include <stdlib.h>

#pragma warning(disable:4996)

typedef struct _node
{
   int data; // 데이터 담을 공간
   struct _node* next; // 연결 도구!
} Node;

int main(void)
{
   Node* head = NULL;    // NULL 포인터 초기화
   Node* tail = NULL;
   Node* cur = NULL;

   Node* newNode = NULL;
   int readData;

   head = (Node*)malloc(sizeof(Node));
   tail = head;

   /**** 데이터를 입력 받는 과정 ****/
   while (1)
   {
      printf("자연수 입력: ");
      scanf("%d", &readData);
      if (readData < 1)
         break;

      /*** 노드의 추가과정 ***/
      newNode = (Node*)malloc(sizeof(Node));
      newNode->data = readData;
      newNode->next = NULL;

      tail->next = newNode;
      tail = newNode;
      /*if (head == NULL)
      {
         head = newNode;
         tail = newNode;
      }
      else
      {
         newNode->next = head;
         head = newNode;
      }*/
   }
   printf("\n");


   /**** 입력 받은 데이터의 출력과정 ****/
   printf("입력 받은 데이터의 전체출력! \n");
   if (head == NULL)
   {
      printf("저장된 자연수가 존재하지 않습니다. \n");
   }
   else
   {
      cur = head;
      //printf("%d ", cur->data); // 첫 번째 데이터 출력

      while (cur->next != NULL)   // 두 번째 이후의 데이터 출력
      {
         cur = cur->next;
         printf("%d  ", cur->data);
      }
   }
   printf("\n\n");

   /**** 메모리의 해제과정 ****/
   if (head == NULL)
   {
      return 0;    // 해제할 노드가 존재하지 않는다.
   }
   else
   {
      Node* delNode = head;
      Node* delNextNode = head->next;

      //printf("%d을(를) 삭제합니다. \n", head->data);
      //free(delNode);    // 첫 번째 노드의 삭제

      while (delNextNode != NULL)    // 두 번째 이후의 노드 삭제 위한 반복문
      {
         delNode = delNextNode;
         delNextNode = delNextNode->next;

         printf("%d을(를) 삭제합니다. \n", delNode->data);
         free(delNode);    // 두 번째 이후의 노드 삭제
      }
   }

   return 0;
}


**더미 연결리스트
** MAIN 코드
#include <stdio.h>
#include "DLinkedList.h"

int SortFunc(int d1, int d2)
{
    if (d1 < d2)
        return 0;    // d1이 정렬 순서상 앞선다.
    else
        return 1;    // d2가 정렬 순서상 앞서거나 같다.
}

int main(void)
{
    // List의 생성 및 초기화 /////////////////////////////
    List list;
    int data;
    ListInit(&list);

    // SetSortRule(&list, SortFunc);

    // 5개의 데이터 저장 /////////////////////////////
    LInsert(&list, 11);  LInsert(&list, 11);
    LInsert(&list, 22);  LInsert(&list, 22);
    LInsert(&list, 33);

    // 저장된 데이터의 전체 출력 /////////////////////////
    printf("현재 데이터의 수: %d \n", LCount(&list));

    if (LFirst(&list, &data))    // 첫 번째 데이터 조회
    {
        printf("%d ", data);

        while (LNext(&list, &data))    // 두 번째 이후의 데이터 조회
            printf("%d ", data);
    }
    printf("\n\n");

    // 숫자 22을 검색하여 모두 삭제 //////////////////////////
    if (LFirst(&list, &data))
    {
        if (data == 22)
            LRemove(&list);

        while (LNext(&list, &data))
        {
            if (data == 22)
                LRemove(&list);
        }
    }

    // 삭제 후 남아있는 데이터 전체 출력 ////////////////////////
    printf("현재 데이터의 수: %d \n", LCount(&list));

    if (LFirst(&list, &data))
    {
        printf("%d ", data);

        while (LNext(&list, &data))
            printf("%d ", data);
    }

    printf("\n\n");

    return 0;
}

** 헤더파일
#ifndef __D_LINKED_LIST_H__
#define __D_LINKED_LIST_H__

#define TRUE   1
#define FALSE   0

typedef int LData;

typedef struct _node
{
	LData data;
	struct _node* next;
} Node;

typedef struct _linkedList
{
	Node* head;   // 더미 노드 가리키는 멤버
	Node* cur;    // 참조/삭제 돕는 멤버
	Node* before; // 삭제 돕는 멤버
	int numOfData; // 저장된 데이터 수 
	int (*comp)(LData d1, LData d2); // 정렬 기준 등록
} LinkedList;


typedef LinkedList List;

void ListInit(List* plist);
void LInsert(List* plist, LData data);

int LFirst(List* plist, LData* pdata);
int LNext(List* plist, LData* pdata);

LData LRemove(List* plist);
int LCount(List* plist);

void SetSortRule(List* plist, int (*comp)(LData d1, LData d2));

#endif


** DlinkedList.c

#include <stdio.h>
#include <stdlib.h>
#include "DLinkedList.h"


/*
head -> [DMY, *]
*/
void ListInit(List * plist)
{
	plist->head = (Node*)malloc(sizeof(Node));
	plist->head->next = NULL;
	plist->comp = NULL;
	plist->numOfData = 0;

}

void FInsert(List * plist, LData data)  // 머리에 새 노드 추가
{
	Node* newNode = (Node*)malloc(sizeof(Node));
	newNode->data = data;

	newNode->next = plist->head->next;
	plist->head ->next= newNode;

	(plist->numOfData)++;
}

void SInsert(List * plist, LData data) 
{
	Node* newNode = (Node*)malloc(sizeof(Node));
	newNode->data = data;
	Node* pred = plist->head;

	while (pred->next != NULL && plist->comp(data, pred->next->data) != 0)
	{
		pred = pred->next;
	}
	newNode->next = pred->next;
	pred->next = newNode;

	(plist->numOfData)++;
}

/*
사용자는, 외부에서 LInsert()만을 호출한다. 
내부적으로, comp 초기화에 따라서, 
(1)FInsert() 아니면, (2)SInsert() 호출되는데, 이건 내부적으로 해주는 것. 
단지, 우리는 comp 초기화를 어떻게 할래?만 정하면 되는 것. 
*/
void LInsert(List * plist, LData data)
{
	if (plist->comp == NULL)
		FInsert(plist, data);
	else
		SInsert(plist, data);
}

int LFirst(List * plist, LData * pdata)
{
	if (plist->head->next == NULL)
		return FALSE;
	
	plist->before = plist->head;
	plist->cur = plist->head->next;

	*pdata = plist->cur->data;

	return TRUE;

}

int LNext(List* plist, LData* pdata)
{
	if (plist->cur->next == NULL)
	{
		return FALSE;
	}
	plist->before = plist->cur;
	plist->cur = plist->cur->next;

	*pdata = plist->cur->data;
	return TRUE;
	
}
/*
바로 이전에 호출된 LFirst or LNext 함수가 반환한 데이터를 삭제한다.
 -> 다른말로 cur 위치에 있는 녀석을 삭제한다. 

*/
LData LRemove(List * plist)
{
	Node* rpos = plist->cur;
	LData rdata = rpos->data;

	plist->before->next = plist->cur->next;
	plist->cur = plist->before;

	free(rpos);
	(plist->numOfData)--;

	return rdata;
}

int LCount(List * plist)
{
   return plist->numOfData;
}

void SetSortRule(List * plist, int (*comp)(LData d1, LData d2))
{
   plist->comp = comp;
}
