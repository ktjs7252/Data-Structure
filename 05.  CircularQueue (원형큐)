** MAIN 코드

#include <stdio.h>
#include "CircularQueue.h"

int main(void)
{
   // Queue의 생성 및 초기화 ///////
   Queue q;
   QueueInit(&q);

   // 데이터 넣기 ///////
   Enqueue(&q, 1);  Enqueue(&q, 2);
   Enqueue(&q, 3);  Enqueue(&q, 4);
   Enqueue(&q, 5);

   // 데이터 꺼내기 ///////
   while(!QIsEmpty(&q))
      printf("%d ", Dequeue(&q)); 

   return 0;
}

** CircularQueue.h 헤더파일

#ifndef __C_QUEUE_H__
#define __C_QUEUE_H__

#define TRUE   1
#define FALSE   0

#define QUE_LEN   100
typedef int Data;

typedef struct _cQueue
{
   int front;
   int rear;
   Data queArr[QUE_LEN];
} CQueue;

typedef CQueue Queue;

void QueueInit(Queue * pq);
int QIsEmpty(Queue * pq);

void Enqueue(Queue * pq, Data data);
Data Dequeue(Queue * pq);
Data QPeek(Queue * pq);

#endif

** CircularQueue.c 소스파일

#include <stdio.h>
#include <stdlib.h>
#include "CircularQueue.h"

void QueueInit(Queue * pq) // 맨 처음은 텅 빈 경우니까, f,r은 동일한 위치(0) 가리킴.
{
    pq->front = 0;
    pq->rear = 0;
}

int QIsEmpty(Queue* pq)
{
    if (pq->front == pq->rear)
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}
int NextPosIdx(int pos) // 큐의 다음 위치에 해당하는 인덱스 값 반환
{
    if (pos == QUE_LEN - 1)
    {
        return 0;
   }
    else
    {
        return pos + 1;
    }
}

void Enqueue(Queue* pq, Data data)
{
    pq->rear = NextPosIdx(pq->rear);
    pq->queArr[pq->rear] = data;
}
Data Dequeue(Queue * pq)
{
    pq->front = NextPosIdx(pq->front);
    return pq->queArr[pq->front];
}

Data QPeek(Queue * pq)
{
    return pq->queArr[pq->front];
}
