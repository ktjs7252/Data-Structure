** MAIN 코드

#include <stdio.h>
#include "ArrayList.h"

#pragma warning(disable:4996)

int main(void)
{
    /*** ArrayList의 생성 및 초기화 ***/
    List list;
    int data;
    ListInit(&list);

    /*** 5개의 데이터 저장 ***/
    LInsert(&list, 11);  LInsert(&list, 11);
    LInsert(&list, 22);  LInsert(&list, 22);
    LInsert(&list, 33);

    /*** 저장된 데이터의 전체 출력 ***/
    printf("현재 데이터의 수: %d \n", LCount(&list));
    printf("데이터 정보 출력 : ");
    if (LFirst(&list, &data))    // 첫 번째 데이터 조회
    {
        printf("%d ", data);

        while (LNext(&list, &data))  // 두 번째 이후의 데이터 조회
            printf("%d ", data);
    }
    printf("\n\n");

    /*** 숫자 22을 탐색하여 모두 삭제 ***/
    if (LFirst(&list, &data))
    {
        if (data == 22)
            LRemove(&list);

        while (LNext(&list, &data))
        {
            if (data == 22)
                LRemove(&list);
        }
    }

    /*** 삭제 후 저장된 데이터 전체 출력 ***/
    printf("현재 데이터의 수: %d \n", LCount(&list));
    printf("데이터 정보 출력 : ");
    if (LFirst(&list, &data))
    {
        printf("%d ", data);

        while (LNext(&list, &data))
            printf("%d ", data);
    }
    printf("\n\n");

    return 0;
}


** 헤더파일

#ifndef __ARRAY_LIST_H__
#include "NameCard.h"

#define __ARRAY_LIST_H__

#define TRUE   1
#define FALSE   0

/*** ArrayList의 정의 ****/
#define LIST_LEN   100
typedef NameCard* LData;

typedef struct __ArrayList
{
	LData arr[LIST_LEN];
	int numOfData;
	int curPosition;
} ArrayList;

/*** ArrayList와 관련된 연산들 ****/
typedef ArrayList List;

void ListInit(List* plist);
void LInsert(List* plist, LData data);

int LFirst(List* plist, LData* pdata);
int LNext(List* plist, LData* pdata);

LData LRemove(List* plist);
int LCount(List* plist);

#endif

** ArrayList.c

#include <stdio.h>
#include "ArrayList.h"

void ListInit(List* plist)
{
   (plist->numOfData) = 0;
   (plist->curPosition) = -1;
}

void LInsert(List* plist, LData data)
{
   if (plist->numOfData > LIST_LEN)
   {
      puts("저장이 불가능합니다.");
      return;
   }

   plist->arr[plist->numOfData] = data;
   (plist->numOfData)++;
}

int LFirst(List* plist, LData* pdata)
{
   if (plist->numOfData == 0)
      return FALSE;

   (plist->curPosition) = 0;
   *pdata = plist->arr[0];

   return TRUE;
}

int LNext(List* plist, LData* pdata)
{
   if (plist->curPosition >= (plist->numOfData) - 1)
      return FALSE;

   (plist->curPosition)++;
   *pdata = plist->arr[plist->curPosition];

   return TRUE;
}

LData LRemove(List* plist)
{
   int rpos = plist->curPosition;
   int num = plist->numOfData;
   int i;
   LData rdata = plist->arr[rpos];

   for (i = rpos; i < num - 1; i++)
      plist->arr[i] = plist->arr[i + 1];

   (plist->numOfData)--;   // 데이터 수 감소
   (plist->curPosition)--; // 참조 위치를 하나 되돌린다.

   return rdata; // 삭제된 데이터 반환.
}

int LCount(List* plist)
{
   return plist->numOfData;
}
