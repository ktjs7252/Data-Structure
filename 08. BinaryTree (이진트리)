** MAIN 코드

#include <stdio.h>
#include "BinaryTree.h"

void InorderTraverse(BTreeNode* bt)
{
   // 1. 재귀함수 탈출 조건.
   if (bt == NULL)
      return;

   // 2. 재귀 MAIN LOGIC
   InorderTraverse(bt->left);
   printf("%d ", bt->data);
   InorderTraverse(bt->right);
   
     if (bt->right != NULL)
     {
         printf("%d ", bt->right->data);
     }

   //if (bt->left == NULL)
   //{
   //   printf("%d ", bt->data);
   //}
   //else
   //{
   //   InorderTraverse(bt->left);
   //   printf("%d ", bt->data);

   //   if (bt->right != NULL)
   //   {
   //      InorderTraverse(bt->right);
   //   }
   //}
}

void PreorderTraverse(BTreeNode* bt)
{
   // 1. 재귀함수 탈출 조건.
   if (bt == NULL)
      return;

   // 2. 재귀 MAIN LOGIC
   printf("%d ", bt->data);
   PreorderTraverse(bt->left);
   PreorderTraverse(bt->right);
}

int main(void)
{
   BTreeNode* bt1 = MakeBTreeNode();
   BTreeNode* bt2 = MakeBTreeNode();
   BTreeNode* bt3 = MakeBTreeNode();
   BTreeNode* bt4 = MakeBTreeNode();
   BTreeNode* bt5 = MakeBTreeNode();
   BTreeNode* bt6 = MakeBTreeNode();
   BTreeNode* bt7 = MakeBTreeNode();

   SetData(bt1, 1);
   SetData(bt2, 2);
   SetData(bt3, 3);
   SetData(bt4, 4);
   SetData(bt5, 5);
   SetData(bt6, 6);
   SetData(bt7, 7);

   MakeLeftSubTree(bt1, bt2);
   MakeRightSubTree(bt1, bt3);
   MakeLeftSubTree(bt2, bt4);
   MakeRightSubTree(bt2, bt5);
   MakeLeftSubTree(bt4, bt7);
   MakeRightSubTree(bt3, bt6);


   InorderTraverse(bt1);

   return 0;
}

** BinaryTree.h 헤더파일

#ifndef __BINARY_TREE_H__
#define __BINARY_TREE_H__

typedef int BTData;

typedef struct _bTreeNode
{
   BTData data;
   struct _bTreeNode * left;
   struct _bTreeNode * right;
} BTreeNode;

/*** BTreeNode 관련 연산들 ****/
BTreeNode* MakeBTreeNode(void); // 노드 생성
BTData GetData(BTreeNode* bt);  // 노드에 저장된 데이터 반환
void SetData(BTreeNode* bt, BTData data); // 노드에 data로 전달된 값을 저장

BTreeNode* GetLeftSubTree(BTreeNode* bt);  // 왼쪽 서브트리 주소값 반환
BTreeNode* GetRightSubTree(BTreeNode* bt); // 오른쪽 서브트리 주소값 반환

void MakeLeftSubTree(BTreeNode* main, BTreeNode* sub); // main의 왼쪽에 서브트리로 연결
void MakeRightSubTree(BTreeNode* main, BTreeNode* sub); // main의 오른쪽에 서브트리로 연결
void DeleteTree(BTreeNode* bt);

#endif

** BinaryTree.c 소스파일

#include <stdio.h>
#include <stdlib.h>
#include "BinaryTree.h"

BTreeNode* MakeBTreeNode(void)
{
   BTreeNode* nd = (BTreeNode*)malloc(sizeof(BTreeNode));

   nd->left = NULL;
   nd->right = NULL;
   return nd;
}

BTData GetData(BTreeNode* bt)
{
   return bt->data;
}

void SetData(BTreeNode* bt, BTData data)
{
   bt->data = data;
}

BTreeNode* GetLeftSubTree(BTreeNode* bt)
{
   return bt->left;
}

BTreeNode* GetRightSubTree(BTreeNode* bt)
{
   return bt->right;
}

void MakeLeftSubTree(BTreeNode* main, BTreeNode* sub)
{
   if(main->left != NULL)
      free(main->left);

   main->left = sub;
}

void MakeRightSubTree(BTreeNode* main, BTreeNode* sub)
{
   if(main->right != NULL)
      free(main->right);

   main->right = sub;
}

void DeleteTree(BTreeNode* bt)
{
   if (bt == NULL)
      return;

   DeleteTree(bt->left);
   DeleteTree(bt->right);

   free(bt);
}
